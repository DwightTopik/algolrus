import argparse
import sys
from pathlib import Path
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')

from mel_parser import parse, ParseError
from mel_ast import ProgramNode


def read_source_file(filename: str) -> str:
    """–ß–∏—Ç–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return f.read()
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{filename}' –Ω–µ –Ω–∞–π–¥–µ–Ω", file=sys.stderr)
        sys.exit(1)
    except UnicodeDecodeError:
        print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª '{filename}' –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8", file=sys.stderr)
        sys.exit(1)


def cmd_parse(args):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ - –≤—ã–≤–æ–¥–∏—Ç AST"""
    source = read_source_file(args.input)
    
    try:
        ast = parse(source)
        print("–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
        print("\nAST:")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ AST
        try:
            ast_str = ast.pretty()
            print(ast_str)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ AST: {e}")
            print(f"AST —Ç–∏–ø: {type(ast)}")
            print(f"AST –∏–º—è: {getattr(ast, 'name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
    except ParseError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}", file=sys.stderr)
        sys.exit(1)


def cmd_run(args):
    """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä"""
    from interpreter import run_program
    
    source = read_source_file(args.input)
    
    try:
        ast = parse(source)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if hasattr(args, 'optimize') and args.optimize:
            from optim import optimize_ast
            ast, stats = optimize_ast(ast)
            if hasattr(args, 'verbose') and args.verbose:
                print(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('total', 0)}")
        
        print(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã '{ast.name}'...")
        run_program(ast)
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except ParseError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}", file=sys.stderr)
        sys.exit(1)


def cmd_compile(args):
    """–ö–æ–º–∞–Ω–¥–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –≤ –±–∞–π—Ç-–∫–æ–¥ VM"""
    from vm_codegen import compile_to_vm
    from vm_core import run_vm_program
    
    source = read_source_file(args.input)
    
    try:
        ast = parse(source)
        print(f"–ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã '{ast.name}'...")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è AST (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if hasattr(args, 'optimize') and args.optimize:
            from optim import optimize_ast
            ast, stats = optimize_ast(ast)
            if hasattr(args, 'verbose') and args.verbose:
                print(f"üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ AST –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('total', 0)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–π—Ç-–∫–æ–¥
        program = compile_to_vm(ast)
        
        # Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–π—Ç-–∫–æ–¥–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
        if hasattr(args, 'optimize') and args.optimize:
            from optim import optimize_bytecode
            original_size = len(program.code)
            program, peephole_stats = optimize_bytecode(program)
            optimized_size = len(program.code)
            if hasattr(args, 'verbose') and args.verbose:
                print(f"üîß Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {peephole_stats.get('total', 0)}")
                print(f"üìä –†–∞–∑–º–µ—Ä –±–∞–π—Ç-–∫–æ–¥–∞: {original_size} ‚Üí {optimized_size} (-{original_size - optimized_size})")
        
        if args.output:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            program.save_to_file(args.output)
            print(f"–ë–∞–π—Ç-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ '{args.output}'")
        else:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É
            print("–ó–∞–ø—É—Å–∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            output = run_vm_program(program)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if output:
                for line in output:
                    print(line)
            
            print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        
    except ParseError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {e}", file=sys.stderr)
        sys.exit(1)


def cmd_vm(args):
    """–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    from vm_core import VMProgram, run_vm_program
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ —Ñ–∞–π–ª–∞
        program = VMProgram.load_from_file(args.input)
        
        print(f"–ó–∞–ø—É—Å–∫ VM –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        output = run_vm_program(program)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if output:
            for line in output:
                print(line)
        
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
        
    except FileNotFoundError:
        print(f"–§–∞–π–ª '{args.input}' –Ω–µ –Ω–∞–π–¥–µ–Ω", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", file=sys.stderr)
        sys.exit(1)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–∞ Pascal",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py parse examples/hello.alg     # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤—ã–≤–æ–¥ AST
  python main.py run examples/hello.alg       # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
  python main.py compile examples/hello.alg   # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ –±–∞–π—Ç-–∫–æ–¥ VM
  python main.py vm hello.avm                 # –ó–∞–ø—É—Å–∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ parse
    parse_parser = subparsers.add_parser('parse', help='–ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤—ã–≤–æ–¥ AST')
    parse_parser.add_argument('input', help='–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª .alg')
    parse_parser.set_defaults(func=cmd_parse)
    
    # –ö–æ–º–∞–Ω–¥–∞ run
    run_parser = subparsers.add_parser('run', help='–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä')
    run_parser.add_argument('input', help='–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª .alg')
    run_parser.add_argument('-O', '--optimize', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')
    run_parser.add_argument('-v', '--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    run_parser.set_defaults(func=cmd_run)
    
    # –ö–æ–º–∞–Ω–¥–∞ compile
    compile_parser = subparsers.add_parser('compile', help='–ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤ –±–∞–π—Ç-–∫–æ–¥ VM')
    compile_parser.add_argument('input', help='–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª .alg')
    compile_parser.add_argument('-o', '--output', help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª .avm')
    compile_parser.add_argument('-O', '--optimize', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')
    compile_parser.add_argument('-v', '--verbose', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    compile_parser.set_defaults(func=cmd_compile)
    
    # –ö–æ–º–∞–Ω–¥–∞ vm
    vm_parser = subparsers.add_parser('vm', help='–ó–∞–ø—É—Å–∫ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞')
    vm_parser.add_argument('input', help='–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª .avm')
    vm_parser.set_defaults(func=cmd_vm)
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    args.func(args)


if __name__ == '__main__':
    main()

