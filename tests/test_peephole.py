#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç—ã –¥–ª—è Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –±–∞–π—Ç-–∫–æ–¥–∞
"""

from mel_parser import parse
from vm_codegen import compile_to_vm
from optim import optimize_bytecode, PeepholeOptimizer
from vm_core import VMInstruction, OpCode

def test_peephole_arithmetic():
    """–¢–µ—Å—Ç peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("=== –¢–µ—Å—Ç Peephole –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    –∞ : —Ü–µ–ª;
–∫–æ–Ω
    –∞ := 5 + 3;
    –∞ := 10 * 2;
–∫–æ–Ω'''
    
    ast = parse(source)
    program = compile_to_vm(ast)
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞–π—Ç-–∫–æ–¥–∞: {len(program.code)}")
    
    optimized_program, stats = optimize_bytecode(program)
    
    print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {len(optimized_program.code)}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('peephole', 0)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
    assert stats.get('peephole', 0) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω—ã peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
    
    print("‚úÖ Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    return True

def test_algebraic_peephole():
    """–¢–µ—Å—Ç –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    print("\n=== –¢–µ—Å—Ç –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    —Ö : —Ü–µ–ª;
–∫–æ–Ω
    —Ö := —Ö + 0;
    —Ö := —Ö * 1;
–∫–æ–Ω'''
    
    ast = parse(source)
    program = compile_to_vm(ast)
    
    original_size = len(program.code)
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞–π—Ç-–∫–æ–¥–∞: {original_size}")
    
    optimized_program, stats = optimize_bytecode(program)
    
    optimized_size = len(optimized_program.code)
    print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {optimized_size}")
    print(f"–£–º–µ–Ω—å—à–µ–Ω–∏–µ: {original_size - optimized_size} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('peephole', 0)}")
    
    # –†–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è
    assert optimized_size < original_size, "–†–∞–∑–º–µ—Ä –±–∞–π—Ç-–∫–æ–¥–∞ –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è"
    
    print("‚úÖ –ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
    return True

def test_constant_folding_in_bytecode():
    """–¢–µ—Å—Ç —Å–≤–µ—Ä—Ç–∫–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–π—Ç-–∫–æ–¥–∞"""
    print("\n=== –¢–µ—Å—Ç —Å–≤–µ—Ä—Ç–∫–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤ –±–∞–π—Ç-–∫–æ–¥–µ ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
    optimizer = PeepholeOptimizer()
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –±–∞–π—Ç-–∫–æ–¥ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è: PUSH 2; PUSH 3; ADD
    from vm_core import VMProgram, VMInstruction, OpCode
    
    instructions = [
        VMInstruction(OpCode.PUSH_INT, 2),
        VMInstruction(OpCode.PUSH_INT, 3),
        VMInstruction(OpCode.ADD),
        VMInstruction(OpCode.PUSH_INT, 5),
        VMInstruction(OpCode.PUSH_INT, 2),
        VMInstruction(OpCode.MUL),
    ]
    
    program = VMProgram(constants=[], code=instructions, globals_count=1)
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(program.code)}")
    for i, instr in enumerate(program.code):
        print(f"  {i}: {instr}")
    
    optimized_program, stats = optimizer.optimize(program)
    
    print(f"\n–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {len(optimized_program.code)}")
    for i, instr in enumerate(optimized_program.code):
        print(f"  {i}: {instr}")
    
    print(f"\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('peephole', 0)}")
    
    # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    assert len(optimized_program.code) < len(program.code)
    
    print("‚úÖ –°–≤–µ—Ä—Ç–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤ –±–∞–π—Ç-–∫–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    return True

def test_integration_optimization():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: AST + Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("\n=== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç : —Ü–µ–ª;
–∫–æ–Ω
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç := 2 + 3 * 4;
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç := —Ä–µ–∑—É–ª—å—Ç–∞—Ç + 0;
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç := —Ä–µ–∑—É–ª—å—Ç–∞—Ç * 1;
–∫–æ–Ω'''
    
    ast = parse(source)
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    program_no_opt = compile_to_vm(ast)
    
    # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å AST –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
    from optim import optimize_ast
    optimized_ast, ast_stats = optimize_ast(ast)
    program_ast_opt = compile_to_vm(optimized_ast)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    program_full_opt, peephole_stats = optimize_bytecode(program_ast_opt)
    
    print(f"–ë–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {len(program_no_opt.code)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    print(f"AST –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(program_ast_opt.code)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    print(f"–ü–æ–ª–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(program_full_opt.code)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    
    print(f"AST –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {ast_stats.get('total', 0)}")
    print(f"Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {peephole_stats.get('total', 0)}")
    
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–∞–º–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π
    assert len(program_full_opt.code) <= len(program_ast_opt.code)
    assert len(program_ast_opt.code) <= len(program_no_opt.code)
    
    print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
    return True

def test_cli_optimization():
    """–¢–µ—Å—Ç CLI —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏"""
    print("\n=== –¢–µ—Å—Ç CLI —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_source = '''–∞–ª–≥ —Ç–µ—Å—Ç_–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏;
–Ω–∞—á
    —Ö : —Ü–µ–ª;
–∫–æ–Ω
    —Ö := 2 + 3;
    —Ö := —Ö + 0;
    —Ö := —Ö * 1;
    –≤—ã–≤–æ–¥(—Ö);
–∫–æ–Ω'''
    
    with open('temp_opt_test.alg', 'w', encoding='utf-8') as f:
        f.write(test_source)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏ —á–µ—Ä–µ–∑ CLI
        import subprocess
        import sys
        
        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        result1 = subprocess.run([
            sys.executable, 'main.py', 'compile', 'temp_opt_test.alg', 
            '-o', 'temp_no_opt.avm'
        ], capture_output=True, text=True, encoding='utf-8')
        
        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        result2 = subprocess.run([
            sys.executable, 'main.py', 'compile', 'temp_opt_test.alg', 
            '-o', 'temp_opt.avm', '-O', '-v'
        ], capture_output=True, text=True, encoding='utf-8')
        
        print("–ö–æ–º–ø–∏–ª—è—Ü–∏—è –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:")
        print(result1.stdout)
        
        print("–ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏:")
        print(result2.stdout)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –≤—ã–≤–æ–¥–µ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è—Ö
        assert "AST –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π" in result2.stdout or "Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏" in result2.stdout
        
        print("‚úÖ CLI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
    finally:
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        import os
        for file in ['temp_opt_test.alg', 'temp_no_opt.avm', 'temp_opt.avm']:
            try:
                os.remove(file)
            except FileNotFoundError:
                pass
    
    return True

def run_all_peephole_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π...")
    
    tests = [
        test_peephole_arithmetic,
        test_algebraic_peephole,
        test_constant_folding_in_bytecode,
        test_integration_optimization,
        test_cli_optimization
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã Peephole –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False

if __name__ == "__main__":
    run_all_peephole_tests() 