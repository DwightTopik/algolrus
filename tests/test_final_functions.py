import mel_parser
import importlib
import sys

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à
mel_parser._parser = None

# –£–¥–∞–ª—è–µ–º –º–æ–¥—É–ª—å –∏–∑ –∫—ç—à–∞ Python
if 'mel_parser' in sys.modules:
    del sys.modules['mel_parser']

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
import mel_parser
importlib.reload(mel_parser)

# –ï—â–µ —Ä–∞–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
mel_parser._parser = None

try:
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ —Ç–µ–ª–µ
    test_code = '''–∞–ª–≥ —Ç–µ—Å—Ç_—Ñ—É–Ω–∫—Ü–∏–π_—Å_–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏;
–Ω–∞—á
    –∞ : —Ü–µ–ª;
    –± : —Ü–µ–ª;
–∫–æ–Ω
—Ñ—É–Ω–∫—Ü–∏–∏
    —Ñ—É–Ω–∫—Ü–∏—è —Å—É–º–º–∞(—Ö : —Ü–µ–ª, —É : —Ü–µ–ª) : —Ü–µ–ª;
    –Ω–∞—á
        temp : —Ü–µ–ª;
    –∫–æ–Ω
        temp := —Ö + —É;
        –∑–Ω–∞—á temp;
    –∫–æ–Ω
–∫–æ–Ω
    –∞ := 10;
    –± := 20;
–∫–æ–Ω'''
    
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ê –ì–†–ê–ú–ú–ê–¢–ò–ö–ê: assignment: lvalue ASSIGN expression")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –≤ —Ç–µ–ª–µ:")
    print(test_code)
    print("\n" + "="*50 + "\n")
    
    ast = mel_parser.parse(test_code)
    print("üéâ –£–°–ü–ï–•! –û–ü–ï–†–ê–¢–û–†–´ –í –¢–ï–õ–ï –§–£–ù–ö–¶–ò–ô –¢–ï–ü–ï–†–¨ –†–ê–ë–û–¢–ê–Æ–¢!")
    print(f"AST —Ç–∏–ø: {type(ast)}")
    print(f"–ò–º—è –ø—Ä–æ–≥—Ä–∞–º–º—ã: {ast.name}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {len(ast.block.var_decls)}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(ast.block.func_decls)}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(ast.block.statements)}")
    
    print("\n–§—É–Ω–∫—Ü–∏–∏:")
    for func in ast.block.func_decls:
        print(f"  - {func.name}({len(func.params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)")
        if func.return_type:
            print(f"    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {func.return_type.name}")
        print(f"    –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ: {len(func.block.var_decls)}")
        print(f"    –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–ª–µ: {len(func.block.statements)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –≤ —Ç–µ–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        for i, stmt in enumerate(func.block.statements):
            print(f"      –æ–ø–µ—Ä–∞—Ç–æ—Ä {i+1}: {type(stmt).__name__}")
    
    print("\n" + "="*60)
    print("‚úÖ –í–°–ï –§–£–ù–ö–¶–ò–ò –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–´!")
    print("‚úÖ –ì–û–¢–û–í–û –î–õ–Ø –ê–¢–¢–ï–°–¢–ê–¶–ò–ò!")
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc() 