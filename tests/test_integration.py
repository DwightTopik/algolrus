



import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
import sys
sys.stdout.reconfigure(encoding='utf-8')

from pathlib import Path
from mel_parser import parse
from interpreter import interpret
from vm_codegen import compile_to_vm
from vm_core import run_vm_program


def test_file_comparison(file_path: str) -> bool:
    print(f"=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {file_path} ===")

    try:

        with open(file_path, 'r', encoding='utf-8') as f:
            source = f.read()


        ast = parse(source)


        interpreter_output = interpret(ast)


        program = compile_to_vm(ast)
        vm_output = run_vm_program(program)


        if interpreter_output == vm_output:
            print(f" {file_path}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return True
        else:
            print(f" {file_path}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
            print(f"  –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä: {interpreter_output}")
            print(f"  VM: {vm_output}")
            return False

    except Exception as e:
        print(f" {file_path}: –æ—à–∏–±–∫–∞ - {e}")
        return False


def test_all_examples():
    print(" –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤...\n")

    examples_dir = Path("examples")
    if not examples_dir.exists():
        print(" –ü–∞–ø–∫–∞ examples –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False


    alg_files = list(examples_dir.glob("*.alg"))

    if not alg_files:
        print(" –§–∞–π–ª—ã .alg –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ examples")
        return False

    passed = 0
    total = len(alg_files)

    for file_path in sorted(alg_files):
        if test_file_comparison(str(file_path)):
            passed += 1
        print()

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

    if passed == total:
        print(" –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print(" –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


def test_specific_cases():
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤...\n")

    test_cases = [
        {
            "name": "–§–∞–∫—Ç–æ—Ä–∏–∞–ª",
            "code": '''–∞–ª–≥ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª;
–Ω–∞—á
    –Ω : —Ü–µ–ª;
    —Ä–µ–∑ : —Ü–µ–ª;
    i : —Ü–µ–ª;
–∫–æ–Ω
    –Ω := 5;
    —Ä–µ–∑ := 1;
    –¥–ª—è i –æ—Ç 1 –¥–æ –Ω
        —Ä–µ–∑ := —Ä–µ–∑ * i;
    –∫—Ü
    –≤—ã–≤–æ–¥(—Ä–µ–∑);
–∫–æ–Ω'''
        },
        {
            "name": "–£—Å–ª–æ–≤–∏—è –∏ –ª–æ–≥–∏–∫–∞",
            "code": '''–∞–ª–≥ –ª–æ–≥–∏–∫–∞;
–Ω–∞—á
    –∞ : –ª–æ–≥;
    –± : –ª–æ–≥;
–∫–æ–Ω
    –∞ := –¥–∞;
    –± := –Ω–µ—Ç;
    –µ—Å–ª–∏ –∞ –∏ –Ω–µ –± —Ç–æ
        –≤—ã–≤–æ–¥("–∏—Å—Ç–∏–Ω–∞");
    –∏–Ω–∞—á–µ
        –≤—ã–≤–æ–¥("–ª–æ–∂—å");
    –≤—Å–µ
–∫–æ–Ω'''
        },
        {
            "name": "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã",
            "code": '''–∞–ª–≥ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ;
–Ω–∞—á
    —Å—É–º–º–∞ : —Ü–µ–ª;
    i : —Ü–µ–ª;
    j : —Ü–µ–ª;
–∫–æ–Ω
    —Å—É–º–º–∞ := 0;
    –¥–ª—è i –æ—Ç 1 –¥–æ 3
        –¥–ª—è j –æ—Ç 1 –¥–æ 2
            —Å—É–º–º–∞ := —Å—É–º–º–∞ + i * j;
        –∫—Ü
    –∫—Ü
    –≤—ã–≤–æ–¥(—Å—É–º–º–∞);
–∫–æ–Ω'''
        }
    ]

    passed = 0
    total = len(test_cases)

    for case in test_cases:
        print(f"=== –¢–µ—Å—Ç: {case['name']} ===")

        try:

            ast = parse(case['code'])


            interpreter_output = interpret(ast)


            program = compile_to_vm(ast)
            vm_output = run_vm_program(program)


            if interpreter_output == vm_output:
                print(f" {case['name']}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                passed += 1
            else:
                print(f" {case['name']}: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
                print(f"  –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä: {interpreter_output}")
                print(f"  VM: {vm_output}")

        except Exception as e:
            print(f" {case['name']}: –æ—à–∏–±–∫–∞ - {e}")

        print()

    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    return passed == total


def test_performance_comparison():
    print("‚è±Ô∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...\n")


    heavy_code = '''–∞–ª–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å;
–Ω–∞—á
    —Å—É–º–º–∞ : —Ü–µ–ª;
    i : —Ü–µ–ª;
–∫–æ–Ω
    —Å—É–º–º–∞ := 0;
    –¥–ª—è i –æ—Ç 1 –¥–æ 1000
        —Å—É–º–º–∞ := —Å—É–º–º–∞ + i;
    –∫—Ü
    –≤—ã–≤–æ–¥(—Å—É–º–º–∞);
–∫–æ–Ω'''

    try:
        import time

        ast = parse(heavy_code)


        start_time = time.time()
        interpreter_output = interpret(ast)
        interpreter_time = time.time() - start_time


        program = compile_to_vm(ast)
        start_time = time.time()
        vm_output = run_vm_program(program)
        vm_time = time.time() - start_time

        print(f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä: {interpreter_time:.4f} —Å–µ–∫")
        print(f"VM: {vm_time:.4f} —Å–µ–∫")

        if vm_time < interpreter_time:
            speedup = interpreter_time / vm_time
            print(f" VM –±—ã—Å—Ç—Ä–µ–µ –≤ {speedup:.2f} —Ä–∞–∑")
        else:
            slowdown = vm_time / interpreter_time
            print(f"üêå VM –º–µ–¥–ª–µ–Ω–Ω–µ–µ –≤ {slowdown:.2f} —Ä–∞–∑")


        if interpreter_output == vm_output:
            print(" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç")
            return True
        else:
            print(" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
            return False

    except Exception as e:
        print(f" –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False


def run_all_integration_tests():
    print("üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...\n")

    tests = [
        ("–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ examples", test_all_examples),
        ("–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏", test_specific_cases),
        ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", test_performance_comparison)
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"üîÑ {test_name}...")
        if test_func():
            passed += 1
        print("=" * 50)

    print(f"\n–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} –≥—Ä—É–ø–ø —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")

    if passed == total:
        print(" –í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚ú® –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä –∏ VM —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –¥–∞—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
        return True
    else:
        print(" –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    run_all_integration_tests()