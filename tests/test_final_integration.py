#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ AlgolRus
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –ø–∞—Ä—Å–µ—Ä, —Å–µ–º–∞–Ω—Ç–∏–∫—É, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä, VM, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import subprocess
import sys
import tempfile
import os
from pathlib import Path

def create_test_program():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    return '''–∞–ª–≥ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π_—Ç–µ—Å—Ç;
–Ω–∞—á
    —Ö : —Ü–µ–ª;
    —É : —Ü–µ–ª;
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç : —Ü–µ–ª;
    —Ñ–ª–∞–≥ : –ª–æ–≥;
    —Å—á–µ—Ç—á–∏–∫ : —Ü–µ–ª;
–∫–æ–Ω
    —Ö := 2 + 3 * 4;
    —É := 10 - 5;
    
    —Ö := —Ö + 0;
    —É := —É * 1;
    
    —Ñ–ª–∞–≥ := —Ö > —É;
    
    –µ—Å–ª–∏ —Ñ–ª–∞–≥ —Ç–æ
        –≤—ã–≤–æ–¥("—Ö –±–æ–ª—å—à–µ —É");
    –∏–Ω–∞—á–µ
        –≤—ã–≤–æ–¥("—É –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ö");
    –≤—Å–µ
    
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç := 0;
    –¥–ª—è —Å—á–µ—Ç—á–∏–∫ –æ—Ç 1 –¥–æ 3
        —Ä–µ–∑—É–ª—å—Ç–∞—Ç := —Ä–µ–∑—É–ª—å—Ç–∞—Ç + —Å—á–µ—Ç—á–∏–∫;
    –∫—Ü
    
    –ø–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç < 10
        —Ä–µ–∑—É–ª—å—Ç–∞—Ç := —Ä–µ–∑—É–ª—å—Ç–∞—Ç + 1;
    –∫—Ü
    
    –≤—ã–≤–æ–¥("–†–µ–∑—É–ª—å—Ç–∞—Ç:");
    –≤—ã–≤–æ–¥(—Ä–µ–∑—É–ª—å—Ç–∞—Ç);
    
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç := –º–æ–¥—É–ª—å(-5);
    –≤—ã–≤–æ–¥("–ú–æ–¥—É–ª—å -5:");
    –≤—ã–≤–æ–¥(—Ä–µ–∑—É–ª—å—Ç–∞—Ç);
–∫–æ–Ω'''

def test_component(component_name, command, expected_in_output=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"""
    print(f"\n=== –¢–µ—Å—Ç {component_name} ===")
    
    try:
        result = subprocess.run(
            command, 
            capture_output=True, 
            text=True, 
            encoding='utf-8',
            timeout=30
        )
        
        print(f"–ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {result.returncode}")
        
        if result.stdout:
            print("–í—ã–≤–æ–¥:")
            print(result.stdout)
        
        if result.stderr:
            print("–û—à–∏–±–∫–∏:")
            print(result.stderr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if result.returncode != 0:
            print(f"‚ùå {component_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥
        if expected_in_output:
            for expected in expected_in_output:
                if expected not in result.stdout:
                    print(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥ '{expected}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
        
        print(f"‚úÖ {component_name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except subprocess.TimeoutExpired:
        print(f"‚ùå {component_name} –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {component_name}: {e}")
        return False

def run_final_integration_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ AlgolRus")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
    test_program = create_test_program()
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.alg', delete=False, encoding='utf-8') as f:
        f.write(test_program)
        test_file = f.name
    
    try:
        results = {}
        
        # 1. –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞
        results['parser'] = test_component(
            "–ü–∞—Ä—Å–µ—Ä",
            [sys.executable, 'main.py', 'parse', test_file],
            expected_in_output=["–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!", "AST:"]
        )
        
        # 2. –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        results['interpreter'] = test_component(
            "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä (–±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π)",
            [sys.executable, 'main.py', 'run', test_file],
            expected_in_output=["—Ö –±–æ–ª—å—à–µ —É", "–†–µ–∑—É–ª—å—Ç–∞—Ç:", "10", "–ú–æ–¥—É–ª—å -5:", "5"]
        )
        
        # 3. –¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        results['interpreter_opt'] = test_component(
            "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏)",
            [sys.executable, 'main.py', 'run', test_file, '-O', '-v'],
            expected_in_output=["—Ö –±–æ–ª—å—à–µ —É", "–†–µ–∑—É–ª—å—Ç–∞—Ç:", "10", "üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"]
        )
        
        # 4. –¢–µ—Å—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        avm_file = test_file.replace('.alg', '.avm')
        results['compile'] = test_component(
            "–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä VM (–±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π)",
            [sys.executable, 'main.py', 'compile', test_file, '-o', avm_file],
            expected_in_output=["–ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã", "–ë–∞–π—Ç-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"]
        )
        
        # 5. –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è VM
        if results['compile']:
            results['vm'] = test_component(
                "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞",
                [sys.executable, 'main.py', 'vm', avm_file],
                expected_in_output=["—Ö –±–æ–ª—å—à–µ —É", "–†–µ–∑—É–ª—å—Ç–∞—Ç:", "10", "–ú–æ–¥—É–ª—å -5:", "5"]
            )
        else:
            results['vm'] = False
        
        # 6. –¢–µ—Å—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        avm_opt_file = test_file.replace('.alg', '_opt.avm')
        results['compile_opt'] = test_component(
            "–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä VM (—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏)",
            [sys.executable, 'main.py', 'compile', test_file, '-o', avm_opt_file, '-O', '-v'],
            expected_in_output=["üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–æ AST –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π", "üìä –†–∞–∑–º–µ—Ä –±–∞–π—Ç-–∫–æ–¥–∞"]
        )
        
        # 7. –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ VM
        if results['compile_opt']:
            results['vm_opt'] = test_component(
                "VM (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)",
                [sys.executable, 'main.py', 'vm', avm_opt_file],
                expected_in_output=["—Ö –±–æ–ª—å—à–µ —É", "–†–µ–∑—É–ª—å—Ç–∞—Ç:", "10", "–ú–æ–¥—É–ª—å -5:", "5"]
            )
        else:
            results['vm_opt'] = False
        
        # 8. –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        commands = [
            ("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä", [sys.executable, 'main.py', 'run', test_file]),
            ("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä+O", [sys.executable, 'main.py', 'run', test_file, '-O']),
            ("VM", [sys.executable, 'main.py', 'vm', avm_file]),
            ("VM+O", [sys.executable, 'main.py', 'vm', avm_opt_file])
        ]
        
        outputs = {}
        for name, cmd in commands:
            try:
                result = subprocess.run(cmd, capture_output=True, text=True, encoding='utf-8', timeout=10)
                if result.returncode == 0:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –≤—ã–≤–æ–¥ (–±–µ–∑ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
                    lines = result.stdout.split('\n')
                    program_output = []
                    in_program = False
                    for line in lines:
                        if '–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã' in line or '–ó–∞–ø—É—Å–∫ VM –ø—Ä–æ–≥—Ä–∞–º–º—ã' in line:
                            in_program = True
                            continue
                        if in_program and line.strip() and not line.startswith('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'):
                            program_output.append(line.strip())
                    outputs[name] = '\n'.join(program_output)
                else:
                    outputs[name] = f"–û–®–ò–ë–ö–ê: {result.returncode}"
            except Exception as e:
                outputs[name] = f"–ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}"
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã–≤–æ–¥—ã
        reference_output = outputs.get("–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä", "")
        all_match = True
        
        for name, output in outputs.items():
            if name == "–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä":
                continue
            if output == reference_output:
                print(f"‚úÖ {name}: –≤—ã–≤–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —ç—Ç–∞–ª–æ–Ω–æ–º")
            else:
                print(f"‚ùå {name}: –≤—ã–≤–æ–¥ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è")
                print(f"   –≠—Ç–∞–ª–æ–Ω: {reference_output}")
                print(f"   –ü–æ–ª—É—á–µ–Ω: {output}")
                all_match = False
        
        results['consistency'] = all_match
        
        # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 60)
        
        passed = sum(1 for result in results.values() if result)
        total = len(results)
        
        for component, result in results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{component:25} {status}")
        
        print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed == total:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ö–û–ú–ü–ò–õ–Ø–¢–û–† –ì–û–¢–û–í –ö –ê–¢–¢–ï–°–¢–ê–¶–ò–ò!")
            print("\nüìã –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
            print("   ‚úÖ –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
            print("   ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä") 
            print("   ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä")
            print("   ‚úÖ Tree-walking –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä")
            print("   ‚úÖ –ö–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä VM")
            print("   ‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞")
            print("   ‚úÖ AST –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (Constant Folding)")
            print("   ‚úÖ Bytecode –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (Peephole)")
            print("   ‚úÖ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            print("   ‚úÖ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
            return True
        else:
            print(f"\n‚ùå {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
            return False
        
    finally:
        # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file_path in [test_file, avm_file, avm_opt_file]:
            try:
                if os.path.exists(file_path):
                    os.unlink(file_path)
            except:
                pass

if __name__ == "__main__":
    success = run_final_integration_test()
    sys.exit(0 if success else 1) 