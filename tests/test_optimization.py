#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
"""

from mel_parser import parse
from optim import optimize_ast, ConstantFolder
from mel_ast import *

def test_constant_folding_arithmetic():
    """–¢–µ—Å—Ç —Å–≤–µ—Ä—Ç–∫–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç"""
    print("=== –¢–µ—Å—Ç —Å–≤–µ—Ä—Ç–∫–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    –∞ : —Ü–µ–ª;
–∫–æ–Ω
    –∞ := 2 + 3 * 4;
    –∞ := 10 - 5;
    –∞ := 6 / 2;
    –∞ := 15 mod 4;
–∫–æ–Ω'''
    
    ast = parse(source)
    optimized_ast, stats = optimize_ast(ast)
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('constant_folding', 0)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ: 2 + 3 * 4 –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å 14
    first_assign = optimized_ast.block.statements[0]
    if isinstance(first_assign.value, IntLiteralNode):
        print(f"‚úÖ 2 + 3 * 4 = {first_assign.value.value}")
        assert first_assign.value.value == 14
    else:
        print(f"‚ùå –ù–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {type(first_assign.value)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ: 10 - 5 –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å 5
    second_assign = optimized_ast.block.statements[1]
    if isinstance(second_assign.value, IntLiteralNode):
        print(f"‚úÖ 10 - 5 = {second_assign.value.value}")
        assert second_assign.value.value == 5
    else:
        print(f"‚ùå –ù–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {type(second_assign.value)}")
    
    return True

def test_constant_folding_logical():
    """–¢–µ—Å—Ç —Å–≤–µ—Ä—Ç–∫–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç"""
    print("\n=== –¢–µ—Å—Ç —Å–≤–µ—Ä—Ç–∫–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    —Ñ–ª–∞–≥ : –ª–æ–≥;
–∫–æ–Ω
    —Ñ–ª–∞–≥ := –¥–∞ –∏ –Ω–µ—Ç;
    —Ñ–ª–∞–≥ := –¥–∞ –∏–ª–∏ –Ω–µ—Ç;
    —Ñ–ª–∞–≥ := –Ω–µ –¥–∞;
    —Ñ–ª–∞–≥ := 5 > 3;
    —Ñ–ª–∞–≥ := 2 = 2;
–∫–æ–Ω'''
    
    ast = parse(source)
    optimized_ast, stats = optimize_ast(ast)
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('constant_folding', 0)}")
    
    statements = optimized_ast.block.statements
    
    # –¥–∞ –∏ –Ω–µ—Ç = –Ω–µ—Ç
    if isinstance(statements[0].value, BoolLiteralNode):
        print(f"‚úÖ –¥–∞ –∏ –Ω–µ—Ç = {statements[0].value.value}")
        assert statements[0].value.value == False
    
    # –¥–∞ –∏–ª–∏ –Ω–µ—Ç = –¥–∞
    if isinstance(statements[1].value, BoolLiteralNode):
        print(f"‚úÖ –¥–∞ –∏–ª–∏ –Ω–µ—Ç = {statements[1].value.value}")
        assert statements[1].value.value == True
    
    # –Ω–µ –¥–∞ = –Ω–µ—Ç
    if isinstance(statements[2].value, BoolLiteralNode):
        print(f"‚úÖ –Ω–µ –¥–∞ = {statements[2].value.value}")
        assert statements[2].value.value == False
    
    # 5 > 3 = –¥–∞
    if isinstance(statements[3].value, BoolLiteralNode):
        print(f"‚úÖ 5 > 3 = {statements[3].value.value}")
        assert statements[3].value.value == True
    
    # 2 = 2 = –¥–∞
    if isinstance(statements[4].value, BoolLiteralNode):
        print(f"‚úÖ 2 = 2 = {statements[4].value.value}")
        assert statements[4].value.value == True
    
    return True

def test_algebraic_optimizations():
    """–¢–µ—Å—Ç –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    print("\n=== –¢–µ—Å—Ç –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    —Ö : —Ü–µ–ª;
–∫–æ–Ω
    —Ö := —Ö + 0;
    —Ö := —Ö * 1;
    —Ö := —Ö * 0;
    —Ö := —Ö / 1;
–∫–æ–Ω'''
    
    ast = parse(source)
    optimized_ast, stats = optimize_ast(ast)
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('constant_folding', 0)}")
    
    statements = optimized_ast.block.statements
    
    # —Ö + 0 = —Ö
    if isinstance(statements[0].value, IdentifierNode):
        print("‚úÖ —Ö + 0 = —Ö")
        assert statements[0].value.name == "—Ö"
    
    # —Ö * 1 = —Ö  
    if isinstance(statements[1].value, IdentifierNode):
        print("‚úÖ —Ö * 1 = —Ö")
        assert statements[1].value.name == "—Ö"
    
    # —Ö * 0 = 0
    if isinstance(statements[2].value, IntLiteralNode):
        print("‚úÖ —Ö * 0 = 0")
        assert statements[2].value.value == 0
    
    # —Ö / 1 = —Ö
    if isinstance(statements[3].value, IdentifierNode):
        print("‚úÖ —Ö / 1 = —Ö")
        assert statements[3].value.name == "—Ö"
    
    return True

def test_constant_if_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ª–æ–≤–∏–π —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏"""
    print("\n=== –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ª–æ–≤–∏–π —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    –∞ : —Ü–µ–ª;
–∫–æ–Ω
    –µ—Å–ª–∏ –¥–∞ —Ç–æ
        –∞ := 1;
    –∏–Ω–∞—á–µ
        –∞ := 2;
    –≤—Å–µ
    
    –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ
        –∞ := 3;
    –∏–Ω–∞—á–µ
        –∞ := 4;
    –≤—Å–µ
–∫–æ–Ω'''
    
    ast = parse(source)
    optimized_ast, stats = optimize_ast(ast)
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('constant_folding', 0)}")
    
    statements = optimized_ast.block.statements
    
    # –ü–µ—Ä–≤—ã–π if –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∞ := 1
    if isinstance(statements[0], AssignNode):
        print("‚úÖ –µ—Å–ª–∏ –¥–∞ —Ç–æ ... –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        assert isinstance(statements[0].value, IntLiteralNode)
        assert statements[0].value.value == 1
    
    # –í—Ç–æ—Ä–æ–π if –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –∞ := 4
    if isinstance(statements[1], AssignNode):
        print("‚úÖ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ ... –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        assert isinstance(statements[1].value, IntLiteralNode)
        assert statements[1].value.value == 4
    
    return True

def test_constant_while_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤ while —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏"""
    print("\n=== –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–∏–∫–ª–æ–≤ while ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    –∞ : —Ü–µ–ª;
–∫–æ–Ω
    –ø–æ–∫–∞ –Ω–µ—Ç
        –∞ := –∞ + 1;
    –∫—Ü
    
    –∞ := 5;
–∫–æ–Ω'''
    
    ast = parse(source)
    optimized_ast, stats = optimize_ast(ast)
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('constant_folding', 0)}")
    
    statements = optimized_ast.block.statements
    
    # –¶–∏–∫–ª while —Å —É—Å–ª–æ–≤–∏–µ–º –Ω–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(statements)}")
    
    # –î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞ := 5
    if len(statements) == 1 and isinstance(statements[0], AssignNode):
        print("‚úÖ –¶–∏–∫–ª while —Å –ª–æ–∂–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º —É–¥–∞–ª–µ–Ω")
        assert isinstance(statements[0].value, IntLiteralNode)
        assert statements[0].value.value == 5
    
    return True

def test_complex_constant_expression():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
    print("\n=== –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç : —Ü–µ–ª;
–∫–æ–Ω
    —Ä–µ–∑—É–ª—å—Ç–∞—Ç := (2 + 3) * (4 - 1) + 10 / 2;
–∫–æ–Ω'''
    
    ast = parse(source)
    optimized_ast, stats = optimize_ast(ast)
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('constant_folding', 0)}")
    
    # (2 + 3) * (4 - 1) + 10 / 2 = 5 * 3 + 5 = 15 + 5 = 20
    assign = optimized_ast.block.statements[0]
    if isinstance(assign.value, IntLiteralNode):
        print(f"‚úÖ –°–ª–æ–∂–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ = {assign.value.value}")
        assert assign.value.value == 20
    else:
        print(f"‚ùå –ù–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {type(assign.value)}")
    
    return True

def test_no_optimization_with_variables():
    """–¢–µ—Å—Ç —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç—Å—è"""
    print("\n=== –¢–µ—Å—Ç —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É—é—Ç—Å—è ===")
    
    source = '''–∞–ª–≥ —Ç–µ—Å—Ç;
–Ω–∞—á
    –∞ : —Ü–µ–ª;
    –± : —Ü–µ–ª;
–∫–æ–Ω
    –∞ := –± + 5;
    –± := –∞ * 2;
–∫–æ–Ω'''
    
    ast = parse(source)
    optimized_ast, stats = optimize_ast(ast)
    
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {stats.get('constant_folding', 0)}")
    
    statements = optimized_ast.block.statements
    
    # –í—ã—Ä–∞–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    assert isinstance(statements[0].value, BinOpNode)
    assert isinstance(statements[1].value, BinOpNode)
    
    print("‚úÖ –í—ã—Ä–∞–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ)")
    
    return True

def run_all_optimization_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    
    tests = [
        test_constant_folding_arithmetic,
        test_constant_folding_logical,
        test_algebraic_optimizations,
        test_constant_if_optimization,
        test_constant_while_optimization,
        test_complex_constant_expression,
        test_no_optimization_with_variables
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False

if __name__ == "__main__":
    run_all_optimization_tests() 